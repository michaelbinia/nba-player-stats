package com.example.nba.repository;

import com.example.nba.model.TeamSeasonStats;
import com.example.nba.repository.key.KeyGenerator;
import org.springframework.stereotype.Repository;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.util.concurrent.ConcurrentHashMap;

/**
 * In-memory implementation of {@code TeamStatisticsStatisticsRepository} for managing NBA team season statistics.
 *
 * This class provides thread-safe methods to save and retrieve team seasonal statistics using an in-memory
 * {@code ConcurrentHashMap} as the data storage mechanism. Each statistic entry is stored using a unique
 * key generated by the provided {@code KeyGenerator} implementation.
 *
 * Features:
 * - Save team season statistics for a specific team and season.
 * - Retrieve team season statistics based on a team's unique identifier and season.
 *
 * Thread-safety:
 * This implementation ensures thread-safety through the use of {@code ConcurrentHashMap}. Concurrent read and
 * write operations are supported without additional synchronization.
 *
 * Limitations:
 * - Since this implementation uses in-memory storage, data is not persisted across application restarts.
 * - Designed for use in scenarios where persistent storage is not required, e.g., testing or development environments.
 *
 * Responsibilities:
 * - Maintain in-memory storage of team seasonal statistics.
 * - Use {@code KeyGenerator} to create unique keys for storing and accessing statistics.
 */
@Repository
public final class InMemoryTeamStatisticsRepository implements TeamStatisticsStatisticsRepository {
    private final ConcurrentHashMap<String, TeamSeasonStats> storage = new ConcurrentHashMap<>();
    private final KeyGenerator keyGenerator;

    public InMemoryTeamStatisticsRepository(KeyGenerator keyGenerator) {
        this.keyGenerator = keyGenerator;
    }

    @Override
    public Mono<TeamSeasonStats> save(TeamSeasonStats teamSeasonStats) {
        return Mono.justOrEmpty(teamSeasonStats)
                .map(stats -> {
                    String key = keyGenerator.generateKey(stats.team().id(), stats.season());
                    storage.put(key, stats);
                    return stats;
                });
    }

    @Override
    public Mono<TeamSeasonStats> findByTeamId(String teamId, String season) {
        return Mono.justOrEmpty(storage.get(keyGenerator.generateKey(teamId, season)));
    }

    @Override
    public Flux<TeamSeasonStats> findAll() {
        return Flux.fromIterable(storage.values());
    }

}
